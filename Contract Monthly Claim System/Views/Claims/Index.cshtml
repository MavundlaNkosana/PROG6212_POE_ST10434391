@model IEnumerable<Contract_Monthly_Claim_System.Models.Claim>

@{
    ViewData["Title"] = "My Claims Dashboard";
    var lecturers = ViewBag.Lecturers as ConcurrentDictionary<Guid, Lecturer>;

    // Function to get a bootstrap badge class based on claim status for transparent tracking
    Func<ClaimStatus, string> GetStatusBadge = status =>
    {
        return status switch
        {
            ClaimStatus.Draft => "badge-primary",
            ClaimStatus.Submitted => "badge-warning",
            ClaimStatus.UnderReview => "badge-info",
            ClaimStatus.Approved => "badge-success",
            ClaimStatus.Rejected => "badge-danger",
            _ => "badge-secondary"
        };
    };
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>@ViewData["Title"]</h2>
    <a asp-action="Create" class="btn btn-primary">New Claim</a>
</div>

<p>Here you can track the status of all your monthly claims.</p>

<table class="table table-hover">
    <thead class="thead-light">
        <tr>
            <th>Lecturer</th>
            <th>Claim Period</th>
            <th>Total Amount</th>
            <th>Submitted On</th>
            <th>Status</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@(lecturers != null && lecturers.TryGetValue(item.LecturerId, out var lecturer) ? lecturer.FullName : "N/A")</td>
                <td>@item.Month/@item.Year</td>
                <td>@item.TotalAmount.ToString("C")</td>
                <td>@(item.SubmittedAt.HasValue? item.SubmittedAt.Value.ToShortDateString() : "N/A")</td>
                <td>
                    <span class="badge @GetStatusBadge(item.Status)">@item.Status</span>
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.ClaimId" class="btn btn-sm btn-outline-primary">View/Edit</a>
                </td>
            </tr>
        }
    </tbody>
</table>
